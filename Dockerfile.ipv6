# MooseFS with IPv6 Support
# Author: Benjamin Arntzen <zorlin@gmail.com>

FROM ubuntu:22.04 AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    autoconf \
    automake \
    libtool \
    pkg-config \
    zlib1g-dev \
    libfuse3-dev \
    python3 \
    && rm -rf /var/lib/apt/lists/*

# Copy MooseFS source
WORKDIR /build
COPY . /build/

# Configure and build MooseFS with IPv6 support
RUN cd /build && \
    autoreconf -fi && \
    ./configure \
        --prefix=/usr \
        --sysconfdir=/etc \
        --localstatedir=/var/lib \
        --with-default-user=mfs \
        --with-default-group=mfs \
        --enable-ipv6 \
        CFLAGS="-O2 -g -DENABLE_IPV6" \
        CXXFLAGS="-O2 -g -DENABLE_IPV6" && \
    make -j$(nproc) && \
    make install

# Runtime image
FROM ubuntu:22.04

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    fuse3 \
    python3 \
    netcat-openbsd \
    iproute2 \
    iputils-ping \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy built MooseFS
COPY --from=builder /usr /usr
COPY --from=builder /etc/mfs /etc/mfs
COPY --from=builder /var/lib/mfs /var/lib/mfs

# Create MFS user
RUN groupadd -r mfs && useradd -r -g mfs mfs && \
    mkdir -p /var/lib/mfs /var/log/mfs /etc/mfs && \
    chown -R mfs:mfs /var/lib/mfs /var/log/mfs /etc/mfs

# IPv6 test script
RUN cat > /usr/local/bin/test-ipv6.sh << 'EOF'
#!/bin/bash
# MooseFS IPv6 Test Script
# Author: Benjamin Arntzen <zorlin@gmail.com>

echo "=== MooseFS IPv6 Support Test ==="
echo ""

# Check IPv6 support
if [ -f /proc/net/if_inet6 ]; then
    echo "✓ IPv6 is enabled in kernel"
else
    echo "✗ IPv6 is not enabled in kernel"
    exit 1
fi

# Show IPv6 addresses
echo ""
echo "IPv6 addresses:"
ip -6 addr show

# Configure based on component
case "$MFS_COMPONENT" in
    master)
        echo ""
        echo "Configuring MFS Master for IPv6..."
        cat > /etc/mfs/mfsmaster.cfg << 'CONFIG'
WORKING_USER = mfs
WORKING_GROUP = mfs
DATA_PATH = /var/lib/mfs
EXPORTS_FILENAME = /etc/mfs/mfsexports.cfg
MATOCS_LISTEN_HOST = *
MATOCL_LISTEN_HOST = *
MATOML_LISTEN_HOST = *
CONFIG
        
        cat > /etc/mfs/mfsexports.cfg << 'EXPORTS'
# Allow all IPv4 and IPv6
*                    /       rw,alldirs,admin,maproot=0:0
EXPORTS
        
        # Ensure proper ownership
        chown -R mfs:mfs /var/lib/mfs /var/log/mfs /etc/mfs
        
        # Remove any stale lockfile and bgsaver lock
        rm -f /var/lib/mfs/.mfsmaster.lock /var/lib/mfs/.bgwriter.lock
        
        # Start master in foreground as mfs user
        # Use -a flag if no metadata.mfs exists (will auto-restore from .back if present)
        if [ ! -f /var/lib/mfs/metadata.mfs ]; then
            echo "No metadata.mfs found - starting with auto-restore (-a flag)..."
            exec su -s /bin/bash mfs -c "mfsmaster -f -a"
        else
            echo "Starting MFS master with existing metadata..."
            exec su -s /bin/bash mfs -c "mfsmaster -f"
        fi
        ;;
        
    chunkserver)
        echo ""
        echo "Configuring MFS Chunkserver for IPv6..."
        cat > /etc/mfs/mfschunkserver.cfg << CONFIG
WORKING_USER = mfs
WORKING_GROUP = mfs
DATA_PATH = /var/lib/mfs
HDD_CONF_FILENAME = /etc/mfs/mfshdd.cfg
MASTER_HOST = ${MASTER_HOST:-mfsmaster}
CSSERV_LISTEN_HOST = ::
CONFIG
        
        cat > /etc/mfs/mfshdd.cfg << 'HDD'
/var/lib/mfs/chunks
HDD
        
        mkdir -p /var/lib/mfs/chunks
        chown -R mfs:mfs /var/lib/mfs/chunks
        
        # Start chunkserver
        exec mfschunkserver -f
        ;;
        
    client)
        echo ""
        echo "MFS Client ready for IPv6 testing"
        echo "Master host: ${MASTER_HOST:-fd00::10}"
        
        # Create mount point
        mkdir -p /mnt/mfs
        
        # Wait for master to be ready
        echo "Waiting for master to be available..."
        sleep 15
        
        # Mount MFS with IPv6
        echo "Mounting MFS over IPv6..."
        if mfsmount /mnt/mfs -H "${MASTER_HOST:-fd00::10}"; then
            echo "✓ IPv6 MFS mount successful!"
            echo "Mount details:"
            df -h /mnt/mfs
            ls -la /mnt/mfs/
            
            # Create test file
            echo "Creating test file over IPv6..."
            dd if=/dev/urandom of=/mnt/mfs/ipv6_test.dat bs=1M count=1 2>/dev/null
            echo "✓ Test file created: $(ls -lh /mnt/mfs/ipv6_test.dat)"
            
            # Keep container running
            echo "IPv6 MooseFS test completed successfully!"
            tail -f /dev/null
        else
            echo "✗ IPv6 MFS mount failed!"
            echo "Debugging info:"
            ping6 -c 3 "${MASTER_HOST:-fd00::10}" || echo "Master not reachable"
            exit 1
        fi
        ;;
        
    gui)
        echo ""
        echo "Configuring MFS GUI for IPv6..."
        # Create GUI config with IPv6 binding
        cat > /etc/mfs/mfsgui.cfg << 'GUICONFIG'
WORKING_USER = mfs
WORKING_GROUP = mfs
DATA_PATH = /var/lib/mfs
HTTP_LISTEN_HOST = ::
HTTP_LISTEN_PORT = 9425
GUICONFIG
        chown -R mfs:mfs /etc/mfs /var/lib/mfs
        # Start the GUI server in foreground
        exec mfsgui -f
        ;;
        
    *)
        echo "Set MFS_COMPONENT to: master, chunkserver, client, or gui"
        exit 1
        ;;
esac
EOF
RUN chmod +x /usr/local/bin/test-ipv6.sh

# Expose ports
EXPOSE 9419 9420 9421 9422 9425

# Entry point
ENTRYPOINT ["/usr/local/bin/test-ipv6.sh"]