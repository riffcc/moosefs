name: MooseFS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 0'  # Weekly security scans

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: moosefs
  KUBERNETES_NAMESPACE: mooseng
  HELM_VERSION: v3.13.0
  KUBECTL_VERSION: v1.28.0

jobs:
  # Code Quality and Security Scanning
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up C/C++ tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-format clang-tidy valgrind

    - name: Run cppcheck static analysis
      run: |
        cppcheck --enable=all --error-exitcode=1 --xml --xml-version=2 \
          --suppress=missingIncludeSystem \
          mfsmaster/ mfschunkserver/ mfsclient/ mfscommon/ \
          2> cppcheck-report.xml || true

    - name: Check code formatting
      run: |
        find mfsmaster/ mfschunkserver/ mfsclient/ mfscommon/ \
          -name "*.c" -o -name "*.h" -o -name "*.cpp" -o -name "*.hpp" | \
          xargs clang-format --dry-run --Werror

    - name: Upload code analysis results
      uses: actions/upload-artifact@v3
      with:
        name: code-analysis-reports
        path: |
          cppcheck-report.xml
        retention-days: 30

  # Rust Components Build and Test
  rust-build-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mooseng
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true

    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          mooseng/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check Rust formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --all-features --workspace

    - name: Run benchmarks
      run: cargo bench --no-run

    - name: Build release binaries
      run: cargo build --release --workspace

    - name: Upload Rust binaries
      uses: actions/upload-artifact@v3
      with:
        name: rust-binaries
        path: |
          mooseng/target/release/mooseng-master
          mooseng/target/release/mooseng-chunkserver
          mooseng/target/release/mooseng-client
          mooseng/target/release/mooseng-cli
          mooseng/target/release/mooseng-metalogger
        retention-days: 30

  # C/C++ Components Build and Test
  c-build-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libc6-dev \
          libfuse3-dev \
          python3 \
          python3-pip \
          zlib1g-dev \
          autotools-dev \
          autoconf \
          libtool

    - name: Configure build
      run: |
        ./configure \
          --prefix=/usr/local \
          --sysconfdir=/etc/mfs \
          --localstatedir=/var/lib/mfs \
          --with-default-user=mfs \
          --with-default-group=mfs
      env:
        CC: ${{ matrix.compiler }}
        CFLAGS: ${{ matrix.build_type == 'Debug' && '-g -O0' || '-O3' }}

    - name: Build MooseFS
      run: make -j$(nproc)

    - name: Run tests
      run: make check

    - name: Install MooseFS
      run: sudo make install

    - name: Upload C/C++ binaries
      uses: actions/upload-artifact@v3
      if: matrix.compiler == 'gcc' && matrix.build_type == 'Release'
      with:
        name: c-binaries
        path: |
          /usr/local/bin/mfsmaster
          /usr/local/bin/mfschunkserver
          /usr/local/bin/mfsmount
        retention-days: 30

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [rust-build-test, c-build-test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: auto

  # Docker Image Building
  docker-build:
    runs-on: ubuntu-latest
    needs: [code-quality, rust-build-test, c-build-test]
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        component: [master, chunkserver, client, metalogger, cli]
        include:
        - component: master
          dockerfile: mfsmaster/Dockerfile.optimized
          context: .
        - component: chunkserver
          dockerfile: mfschunkserver/Dockerfile.optimized
          context: .
        - component: client
          dockerfile: mfsclient/Dockerfile
          context: .
        - component: metalogger
          dockerfile: mfsmetalogger/Dockerfile
          context: .
        - component: cli
          dockerfile: mooseng/docker/Dockerfile.cli
          context: ./mooseng
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_PREFIX }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDNO=${{ github.run_number }}

    - name: Run Docker image security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_PREFIX }}-${{ matrix.component }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: Upload Docker image scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-image-results.sarif'

  # Integration Testing
  integration-test:
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" \
          -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Run integration tests
      run: |
        # Use the optimized docker-compose configuration
        cp docker-compose.optimized.yml docker-compose.test.yml
        
        # Override images to use the built ones
        export BUILD_NUMBER=${{ github.run_number }}
        export REGISTRY=${{ env.REGISTRY }}
        export REPO_OWNER=${{ github.repository_owner }}
        
        # Start the cluster
        docker-compose -f docker-compose.test.yml up -d
        
        # Wait for services to be healthy
        sleep 60
        
        # Run basic functionality tests
        docker-compose -f docker-compose.test.yml exec -T master mfsmaster -t
        docker-compose -f docker-compose.test.yml exec -T chunkserver-1 mfschunkserver -t
        
        # Cleanup
        docker-compose -f docker-compose.test.yml down -v

    - name: Upload integration test logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-logs
        path: |
          logs/
          docker-compose.test.yml
        retention-days: 7

  # Performance Benchmarking
  performance-test:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Rust for benchmarking
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Run performance benchmarks
      working-directory: ./mooseng
      run: |
        cargo bench --workspace 2>&1 | tee benchmark-results.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: performance-benchmarks
        path: |
          mooseng/benchmark-results.txt
          mooseng/target/criterion/
        retention-days: 30

  # Kubernetes Deployment (Staging)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update Helm values for staging
        helm upgrade --install mooseng-staging ./mooseng/helm/mooseng \
          --namespace ${{ env.KUBERNETES_NAMESPACE }}-staging \
          --create-namespace \
          --set global.imageRegistry=${{ env.REGISTRY }}/${{ github.repository_owner }} \
          --set master.image.tag=${{ github.sha }} \
          --set chunkserver.image.tag=${{ github.sha }} \
          --set metalogger.image.tag=${{ github.sha }} \
          --set client.image.tag=${{ github.sha }} \
          --set cli.image.tag=${{ github.sha }} \
          --set global.environment=staging \
          --wait --timeout=10m

    - name: Run staging smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod \
          --selector=app.kubernetes.io/name=mooseng \
          --namespace=${{ env.KUBERNETES_NAMESPACE }}-staging \
          --timeout=300s
        
        # Run basic health checks
        kubectl exec -n ${{ env.KUBERNETES_NAMESPACE }}-staging \
          deployment/mooseng-cli -- mooseng-cli cluster status

  # Production Deployment
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging, performance-test]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        export VERSION=${GITHUB_REF#refs/tags/}
        
        # Deploy with production configuration
        helm upgrade --install mooseng ./mooseng/helm/mooseng \
          --namespace ${{ env.KUBERNETES_NAMESPACE }} \
          --create-namespace \
          --set global.imageRegistry=${{ env.REGISTRY }}/${{ github.repository_owner }} \
          --set master.image.tag=$VERSION \
          --set chunkserver.image.tag=$VERSION \
          --set metalogger.image.tag=$VERSION \
          --set client.image.tag=$VERSION \
          --set cli.image.tag=$VERSION \
          --set global.environment=production \
          --set master.resources.requests.memory=2Gi \
          --set master.resources.limits.memory=8Gi \
          --set chunkserver.resources.requests.memory=4Gi \
          --set chunkserver.resources.limits.memory=16Gi \
          --wait --timeout=15m

    - name: Verify production deployment
      run: |
        export KUBECONFIG=kubeconfig
        
        # Check rollout status
        kubectl rollout status statefulset/mooseng-master \
          --namespace=${{ env.KUBERNETES_NAMESPACE }} --timeout=600s
        
        kubectl rollout status daemonset/mooseng-chunkserver \
          --namespace=${{ env.KUBERNETES_NAMESPACE }} --timeout=600s
        
        # Run production health checks
        kubectl exec -n ${{ env.KUBERNETES_NAMESPACE }} \
          deployment/mooseng-cli -- mooseng-cli cluster status --verbose

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
    - name: Clean up old container images
      run: |
        # This would typically connect to your container registry
        # and clean up old images based on your retention policy
        echo "Cleanup job placeholder - implement based on your registry"

    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow