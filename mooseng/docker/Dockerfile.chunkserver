# Multi-stage Docker build for MooseNG Chunk Server
FROM rust:1.79-alpine AS builder

# Install required packages
RUN apk add --no-cache \
    musl-dev \
    pkgconfig \
    openssl-dev \
    protobuf-dev \
    protoc \
    build-base

# Create a new directory for our application
WORKDIR /app

# Copy Cargo files first to leverage Docker layer caching
COPY Cargo.toml Cargo.lock ./
COPY mooseng-chunkserver/Cargo.toml ./mooseng-chunkserver/
COPY mooseng-common/Cargo.toml ./mooseng-common/
COPY mooseng-protocol/Cargo.toml ./mooseng-protocol/
COPY mooseng-master/Cargo.toml ./mooseng-master/
COPY mooseng-client/Cargo.toml ./mooseng-client/
COPY mooseng-metalogger/Cargo.toml ./mooseng-metalogger/
COPY mooseng-cli/Cargo.toml ./mooseng-cli/
COPY mooseng-benchmarks/Cargo.toml ./mooseng-benchmarks/

# Copy only necessary source code for chunkserver
COPY mooseng-chunkserver/src ./mooseng-chunkserver/src
COPY mooseng-common/src ./mooseng-common/src
COPY mooseng-protocol/src ./mooseng-protocol/src
COPY mooseng-protocol/proto ./mooseng-protocol/proto
COPY mooseng-protocol/build.rs ./mooseng-protocol/

# Create stub source directories for other workspace members to satisfy Cargo
RUN mkdir -p mooseng-master/src mooseng-client/src mooseng-metalogger/src mooseng-cli/src mooseng-benchmarks/src
RUN echo "fn main() {}" > mooseng-master/src/main.rs
RUN echo "fn main() {}" > mooseng-client/src/main.rs  
RUN echo "fn main() {}" > mooseng-metalogger/src/main.rs
RUN echo "fn main() {}" > mooseng-cli/src/main.rs
RUN echo "pub fn bench() {}" > mooseng-benchmarks/src/lib.rs

# Build dependencies only first (for better caching)
RUN cargo build --release --bin mooseng-chunkserver --no-default-features 2>/dev/null || true

# Build the application with optimizations
RUN RUSTFLAGS="-C link-arg=-s" cargo build --release --bin mooseng-chunkserver

# Strip binary for minimal size
RUN strip /app/target/release/mooseng-chunkserver

# Runtime stage
FROM alpine:3.19

# Install runtime dependencies
RUN apk add --no-cache \
    openssl \
    ca-certificates \
    tini \
    fuse3 \
    netcat-openbsd

# Create non-root user
RUN addgroup -g 1000 mooseng && \
    adduser -u 1000 -G mooseng -s /bin/sh -D mooseng

# Create necessary directories
RUN mkdir -p /var/lib/mooseng/chunks /var/log/mooseng /etc/mooseng && \
    chown -R mooseng:mooseng /var/lib/mooseng /var/log/mooseng /etc/mooseng

# Create data directories (matches docker-compose volume structure)
RUN mkdir -p /data/disk1 /data/disk2 /data/disk3 /data/disk4 && \
    chown -R mooseng:mooseng /data

# Copy the built binary (already stripped)
COPY --from=builder /app/target/release/mooseng-chunkserver /usr/local/bin/

# Copy configuration templates
COPY docker/configs/chunkserver.toml /etc/mooseng/chunkserver.toml.template

# Copy entrypoint script
COPY docker/scripts/chunkserver-entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD /usr/local/bin/mooseng-chunkserver --health-check || exit 1

# Switch to non-root user
USER mooseng

# Expose ports
EXPOSE 9420

# Set environment variables
ENV RUST_LOG=info
ENV MOOSENG_CONFIG_PATH=/etc/mooseng/chunkserver.toml
ENV MOOSENG_DATA_DIRS=/data/disk1,/data/disk2,/data/disk3,/data/disk4
ENV MOOSENG_LOG_DIR=/var/log/mooseng

# Use tini as init system
ENTRYPOINT ["/sbin/tini", "--"]
CMD ["/usr/local/bin/entrypoint.sh"]