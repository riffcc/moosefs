version: '3.8'

# Optimized Docker Compose configuration for MooseFS
# Features:
# - Resource limits and reservations
# - Health checks with proper timeouts
# - Logging configuration
# - Security context
# - Optimized networking

services:
  # Master server with resource limits
  master:
    build:
      context: .
      dockerfile: mfsmaster/Dockerfile.optimized
      args:
        BUILDNO: "${BUILD_NUMBER:-latest}"
      cache_from:
        - moosefs/master:cache
    image: moosefs/master:optimized
    container_name: moosefs-master
    hostname: master
    environment:
      - MFSMASTER_CONFIG_FILE=/etc/mfs/mfsmaster.cfg
      - MFSMASTER_EXPORTS_FILE=/etc/mfs/mfsexports.cfg
      - MFSMASTER_TOPOLOGY_FILE=/etc/mfs/mfstopology.cfg
      - MFSMASTER_PERSONALITY=master
      - MFSMASTER_DATA_PATH=/var/lib/mfs
      - MFSMASTER_WORKING_USER=mfs
      - MFSMASTER_WORKING_GROUP=mfs
    ports:
      - "9419:9419"  # Client communication port
      - "9420:9420"  # Chunkserver communication port  
      - "9421:9421"  # Admin/CGI port
    volumes:
      - type: volume
        source: master-data
        target: /var/lib/mfs
        volume:
          nocopy: false
      - type: volume
        source: master-logs
        target: /var/log/mfs
        volume:
          nocopy: false
      - type: bind
        source: ./mfsdata
        target: /etc/mfs
        read_only: true
    networks:
      moosefs-net:
        aliases:
          - mfs-master
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Chunkserver 1 with optimized configuration
  chunkserver-1:
    build:
      context: .
      dockerfile: mfschunkserver/Dockerfile.optimized
      args:
        BUILDNO: "${BUILD_NUMBER:-latest}"
      cache_from:
        - moosefs/chunkserver:cache
    image: moosefs/chunkserver:optimized
    container_name: moosefs-chunkserver-1
    hostname: chunkserver-1
    environment:
      - MFSCHUNKSERVER_CONFIG_FILE=/etc/mfs/mfschunkserver.cfg
      - MFSCHUNKSERVER_HDD_CONFIG_FILE=/etc/mfs/mfshdd.cfg
      - MFSCHUNKSERVER_MASTER_HOST=master
      - MFSCHUNKSERVER_MASTER_PORT=9420
      - MFSCHUNKSERVER_BIND_HOST=0.0.0.0
      - MFSCHUNKSERVER_PORT=9422
      - MFSCHUNKSERVER_DATA_PATH=/var/lib/mfs
      - MFSCHUNKSERVER_WORKING_USER=mfs
      - MFSCHUNKSERVER_WORKING_GROUP=mfs
    ports:
      - "9422:9422"
    volumes:
      - type: volume
        source: chunkserver-1-data1
        target: /mnt/mfschunks1
        volume:
          nocopy: false
      - type: volume
        source: chunkserver-1-data2
        target: /mnt/mfschunks2
        volume:
          nocopy: false
      - type: volume
        source: chunkserver-1-data3
        target: /mnt/mfschunks3
        volume:
          nocopy: false
      - type: volume
        source: chunkserver-1-data4
        target: /mnt/mfschunks4
        volume:
          nocopy: false
      - type: volume
        source: chunkserver-1-meta
        target: /var/lib/mfs
        volume:
          nocopy: false
      - type: volume
        source: chunkserver-1-logs
        target: /var/log/mfs
        volume:
          nocopy: false
      - type: bind
        source: ./mfsdata
        target: /etc/mfs
        read_only: true
    networks:
      moosefs-net:
        aliases:
          - chunkserver-1
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    depends_on:
      master:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Chunkserver 2 with optimized configuration
  chunkserver-2:
    image: moosefs/chunkserver:optimized
    container_name: moosefs-chunkserver-2
    hostname: chunkserver-2
    environment:
      - MFSCHUNKSERVER_CONFIG_FILE=/etc/mfs/mfschunkserver.cfg
      - MFSCHUNKSERVER_HDD_CONFIG_FILE=/etc/mfs/mfshdd.cfg
      - MFSCHUNKSERVER_MASTER_HOST=master
      - MFSCHUNKSERVER_MASTER_PORT=9420
      - MFSCHUNKSERVER_BIND_HOST=0.0.0.0
      - MFSCHUNKSERVER_PORT=9422
      - MFSCHUNKSERVER_DATA_PATH=/var/lib/mfs
      - MFSCHUNKSERVER_WORKING_USER=mfs
      - MFSCHUNKSERVER_WORKING_GROUP=mfs
    ports:
      - "9432:9422"
    volumes:
      - chunkserver-2-data1:/mnt/mfschunks1
      - chunkserver-2-data2:/mnt/mfschunks2
      - chunkserver-2-data3:/mnt/mfschunks3
      - chunkserver-2-data4:/mnt/mfschunks4
      - chunkserver-2-meta:/var/lib/mfs
      - chunkserver-2-logs:/var/log/mfs
      - ./mfsdata:/etc/mfs:ro
    networks:
      moosefs-net:
        aliases:
          - chunkserver-2
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    depends_on:
      master:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Chunkserver 3 with optimized configuration
  chunkserver-3:
    image: moosefs/chunkserver:optimized
    container_name: moosefs-chunkserver-3
    hostname: chunkserver-3
    environment:
      - MFSCHUNKSERVER_CONFIG_FILE=/etc/mfs/mfschunkserver.cfg
      - MFSCHUNKSERVER_HDD_CONFIG_FILE=/etc/mfs/mfshdd.cfg
      - MFSCHUNKSERVER_MASTER_HOST=master
      - MFSCHUNKSERVER_MASTER_PORT=9420
      - MFSCHUNKSERVER_BIND_HOST=0.0.0.0
      - MFSCHUNKSERVER_PORT=9422
      - MFSCHUNKSERVER_DATA_PATH=/var/lib/mfs
      - MFSCHUNKSERVER_WORKING_USER=mfs
      - MFSCHUNKSERVER_WORKING_GROUP=mfs
    ports:
      - "9442:9422"
    volumes:
      - chunkserver-3-data1:/mnt/mfschunks1
      - chunkserver-3-data2:/mnt/mfschunks2
      - chunkserver-3-data3:/mnt/mfschunks3
      - chunkserver-3-data4:/mnt/mfschunks4
      - chunkserver-3-meta:/var/lib/mfs
      - chunkserver-3-logs:/var/log/mfs
      - ./mfsdata:/etc/mfs:ro
    networks:
      moosefs-net:
        aliases:
          - chunkserver-3
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    depends_on:
      master:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Metalogger for metadata backup
  metalogger:
    build:
      context: .
      dockerfile: mfsmetalogger/Dockerfile
      args:
        BUILDNO: "${BUILD_NUMBER:-latest}"
    container_name: moosefs-metalogger
    hostname: metalogger
    environment:
      - MFSMETALOGGER_CONFIG_FILE=/etc/mfs/mfsmetalogger.cfg
      - MFSMETALOGGER_MASTER_HOST=master
      - MFSMETALOGGER_MASTER_PORT=9419
      - MFSMETALOGGER_DATA_PATH=/var/lib/mfs
      - MFSMETALOGGER_WORKING_USER=mfs
      - MFSMETALOGGER_WORKING_GROUP=mfs
    volumes:
      - metalogger-data:/var/lib/mfs
      - metalogger-logs:/var/log/mfs
      - ./mfsdata:/etc/mfs:ro
    networks:
      - moosefs-net
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    depends_on:
      master:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD", "mfsmetalogger", "-t"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # CGI Server for web interface
  cgiserver:
    build:
      context: .
      dockerfile: mfsscripts/Dockerfile.cgiserver
      args:
        BUILDNO: "${BUILD_NUMBER:-latest}"
    container_name: moosefs-cgiserver
    hostname: cgiserver
    environment:
      - MFSCGISERV_CONFIG_FILE=/etc/mfs/mfscgiserv.cfg
      - MFSCGISERV_MASTER_HOST=master
      - MFSCGISERV_MASTER_PORT=9421
      - MFSCGISERV_LISTEN_HOST=0.0.0.0
      - MFSCGISERV_LISTEN_PORT=9425
    ports:
      - "9425:9425"
    volumes:
      - ./mfsdata:/etc/mfs:ro
      - ./mfsscripts:/usr/share/mfscgi:ro
    networks:
      - moosefs-net
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    depends_on:
      master:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9425/mfs.cgi"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: moosefs-prometheus
    hostname: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - moosefs-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: moosefs-grafana
    hostname: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-clock-panel
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - moosefs-net
    restart: unless-stopped
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  moosefs-net:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
      com.docker.network.driver.mtu: "1500"
    ipam:
      driver: default
      config:
        - subnet: 172.19.0.0/16
          gateway: 172.19.0.1

volumes:
  # Master server volumes
  master-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./volumes}/master/data
    labels:
      com.moosefs.component: master
      com.moosefs.type: data
  master-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./volumes}/master/logs
    labels:
      com.moosefs.component: master
      com.moosefs.type: logs

  # Chunkserver 1 volumes
  chunkserver-1-data1:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./volumes}/chunkserver-1/data1
    labels:
      com.moosefs.component: chunkserver
      com.moosefs.node: chunkserver-1
      com.moosefs.storage: data1
  chunkserver-1-data2:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./volumes}/chunkserver-1/data2
    labels:
      com.moosefs.component: chunkserver
      com.moosefs.node: chunkserver-1
      com.moosefs.storage: data2
  chunkserver-1-data3:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./volumes}/chunkserver-1/data3
    labels:
      com.moosefs.component: chunkserver
      com.moosefs.node: chunkserver-1
      com.moosefs.storage: data3
  chunkserver-1-data4:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./volumes}/chunkserver-1/data4
    labels:
      com.moosefs.component: chunkserver
      com.moosefs.node: chunkserver-1
      com.moosefs.storage: data4
  chunkserver-1-meta:
    driver: local
    labels:
      com.moosefs.component: chunkserver
      com.moosefs.node: chunkserver-1
      com.moosefs.type: metadata
  chunkserver-1-logs:
    driver: local
    labels:
      com.moosefs.component: chunkserver
      com.moosefs.node: chunkserver-1
      com.moosefs.type: logs

  # Similar volumes for chunkserver-2 and chunkserver-3
  chunkserver-2-data1:
    driver: local
    labels:
      com.moosefs.component: chunkserver
      com.moosefs.node: chunkserver-2
      com.moosefs.storage: data1
  chunkserver-2-data2:
    driver: local
    labels:
      com.moosefs.component: chunkserver
      com.moosefs.node: chunkserver-2
      com.moosefs.storage: data2
  chunkserver-2-data3:
    driver: local
    labels:
      com.moosefs.component: chunkserver
      com.moosefs.node: chunkserver-2
      com.moosefs.storage: data3
  chunkserver-2-data4:
    driver: local
    labels:
      com.moosefs.component: chunkserver
      com.moosefs.node: chunkserver-2
      com.moosefs.storage: data4
  chunkserver-2-meta:
    driver: local
    labels:
      com.moosefs.component: chunkserver
      com.moosefs.node: chunkserver-2
      com.moosefs.type: metadata
  chunkserver-2-logs:
    driver: local
    labels:
      com.moosefs.component: chunkserver
      com.moosefs.node: chunkserver-2
      com.moosefs.type: logs

  chunkserver-3-data1:
    driver: local
    labels:
      com.moosefs.component: chunkserver
      com.moosefs.node: chunkserver-3
      com.moosefs.storage: data1
  chunkserver-3-data2:
    driver: local
    labels:
      com.moosefs.component: chunkserver
      com.moosefs.node: chunkserver-3
      com.moosefs.storage: data2
  chunkserver-3-data3:
    driver: local
    labels:
      com.moosefs.component: chunkserver
      com.moosefs.node: chunkserver-3
      com.moosefs.storage: data3
  chunkserver-3-data4:
    driver: local
    labels:
      com.moosefs.component: chunkserver
      com.moosefs.node: chunkserver-3
      com.moosefs.storage: data4
  chunkserver-3-meta:
    driver: local
    labels:
      com.moosefs.component: chunkserver
      com.moosefs.node: chunkserver-3
      com.moosefs.type: metadata
  chunkserver-3-logs:
    driver: local
    labels:
      com.moosefs.component: chunkserver
      com.moosefs.node: chunkserver-3
      com.moosefs.type: logs

  # Metalogger volumes
  metalogger-data:
    driver: local
    labels:
      com.moosefs.component: metalogger
      com.moosefs.type: data
  metalogger-logs:
    driver: local
    labels:
      com.moosefs.component: metalogger
      com.moosefs.type: logs

  # Monitoring volumes
  prometheus-data:
    driver: local
    labels:
      com.moosefs.component: monitoring
      com.moosefs.type: prometheus
  grafana-data:
    driver: local
    labels:
      com.moosefs.component: monitoring
      com.moosefs.type: grafana