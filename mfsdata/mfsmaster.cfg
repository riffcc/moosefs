######################################################################
# STARTUP OPTIONS - changes in this section require process restart. #
######################################################################

# user to run daemon as (default is mfs)
# WORKING_USER = mfs

# group to run daemon as (optional - if empty then default user group will be used)
# WORKING_GROUP = mfs

# name of process to place in syslog messages (default is mfsmaster)
# SYSLOG_IDENT = mfsmaster

# whether to perform mlockall() to avoid swapping out mfsmaster process (default is 0, i.e. no)
# LOCK_MEMORY = 0

# Linux only: disable out of memory killer (default is 1)
# DISABLE_OOM_KILLER = 1

# nice level to run daemon with (default is -19; note: process must be started as root to increase priority, if setting of priority fails, process retains the nice level it started with)
# NICE_LEVEL = -19

# set default umask for group and others (user has always 0, default is 027 - block write for group and block all for others)
# FILE_UMASK = 027

# where to store daemon lock file (default is /var/lib/mfs)
# DATA_PATH = /var/lib/mfs

##########################################################################
# RUNTIME OPTIONS - changes in this section require only process reload. #
##########################################################################

# alternate location/name of mfsexports.cfg file (default is /etc/mfs/mfsexports.cfg); this file will be re-read on each process reload, regardless if the path was changed
# EXPORTS_FILENAME = /etc/mfs/mfsexports.cfg

# alternate location/name of mfstopology.cfg file (default is /etc/mfs/mfstopology.cfg); this file will be re-read on each process reload, regardless if the path was changed
# TOPOLOGY_FILENAME = /etc/mfs/mfstopology.cfg

# optional name of MooseFS instance (cluster) that will be displayed in GUI interface (default is empty string)
# INSTANCE_NAME = 

# offset used for options: METADATA_SAVE_FREQ (minutes - default is 0)
# format X:Y is also accepted and means X hours and Y minutes, suffix "L" can be added to mean local(server) time zone instead of UTC
# METADATA_SAVE_OFFSET = 0

# how often single master or follower will store metadata (hours - default is 1)
# METADATA_SAVE_FREQ = 1

# number of previous metadata files to be kept (default is 1)
# BACK_META_KEEP_PREVIOUS = 1

# number of metadata change log files (default is 50)
# BACK_LOGS = 50

# how many seconds of change logs have to be preserved in memory (default is 5000; this sets the minimum, actual number may be a bit bigger 
# due to logs being kept in 5k blocks; zero disables extra logs storage)
# CHANGELOG_PRESERVE_SECONDS = 5000

# how much RAM can be used to preserve change logs in memory in megabytes (deafult is 500; this sets the minimum, actual number may be a bit bigger
# due to logs being kept in 5k blocks; zero disables extra logs storage)
# master will always preserve the lower number of 5k blocks defined by CHANGELOG_PRESERVE_SECONDS and CHANGELOG_PRESERVE_MB, so be sure to set them appropriately
# CHANGELOG_PRESERVE_MB = 500

# changelog save mode, one of the three following behaviours is possible:
# 0 - write in background by different process (less safe, but doesn't make master stop in case of heavy hdd load)
# 1 - write in foreground without syncing data (master waits for every changelog to be saved to hdd, but without syncing - a little more safe than the background option, but may cause master to stop and wait for flushing hdd buffers)
# 2 - write in foreground with fsync after each write (very safe, but may make your master very slow unless you have very sophisticated hardware)
# CHANGELOG_SAVE_MODE = 0

# how many missing chunks will be stored in master (up to 100*MISSING_LOG_CAPACITY bytes of memory will be allocated)
# MISSING_LOG_CAPACITY = 100000

# minimum level of messages that will be reported by master; levels in order of importance: ERROR, WARNING, NOTICE, INFO, DEBUG
# SYSLOG_MIN_LEVEL = INFO

# reported messages of level lower than set here will be elevated to this level (i.e. if SYSLOG_MIN_LEVEL is set to DEBUG and SYSLOG_ELEVATE_TO is set to NOTICE, all INFO and DEBUG messages will be sent to syslog as NOTICE)
# SYSLOG_ELEVATE_TO = NOTICE

#####################################################################################
# COMMAND CONNECTION OPTIONS - changes in this section require only process reload. #
#####################################################################################

# IP address to listen on for metalogger and supervisors connections (* means any)
# MATOML_LISTEN_HOST = *

# port to listen on for metalogger and supervisors connections (default is 9419)
# MATOML_LISTEN_PORT = 9419

# default timeout in seconds for master-metalogger connection (default is 10)
# MATOML_TIMEOUT = 10

# forced timeout in seconds for master-metalogger connection (default is 0 - do not force timeouts)
# MATOML_FORCE_TIMEOUT = 0

#########################################################################################
# CHUNKSERVER CONNECTION OPTIONS - changes in this section require only process reload. #
#########################################################################################

# IP address to listen on for chunkservers connections (* means any)
# MATOCS_LISTEN_HOST = *

# port to listen on for chunkserver connections (default is 9420)
# MATOCS_LISTEN_PORT = 9420

# default timeout in seconds for master-chunkserver connection (default is 10)
# MATOCS_TIMEOUT = 10

# forced timeout in seconds for master-chunkserver connection (default is 0 - do not force timeouts)
# MATOCS_FORCE_TIMEOUT = 0

# optional authentication string; when defined, only chunkservers with the same AUTH_CODE are allowed to connect to this master; when not defined (default), all chunkservers are allowed
# note: if you want to switch on chunkserver authentication, then first define AUTH_CODE in all your chunkservers (and reload/restart them) then uncomment this option and reload/restart master
# after reload currently connected chunkservers are NOT disconnected - new AUTH_CODE will be used when chunkservers will make new connection
# AUTH_CODE = mfspassword

# optional IP class remapping: if you want to use class A for communication with master and class B for I/O (communication with chunkservers) then define class A as REMAP_SOURCE_IP_CLASS and class B as REMAP_DESTINATION_IP_CLASS
# you must also define REMAP_BITS which means how many of first bits of class A should be changed to bits from class B; all chunkserver IP numbers that are not in class A will stay unchanged
# REMAP_BITS = 24
# REMAP_SOURCE_IP_CLASS = 192.168.1.0
# REMAP_DESTINATION_IP_CLASS = 10.0.0.0

# optional LAN IP remapping: if you have clients in multiple LANs and want the clients communication to stay in the class of their LAN, then define those classes and MULTILAN_BITS value; first MULTILAN_BITS bits of each IP sent to the client will be changed to bits from client's IP for all client IPs that match the defined classes; all masters and chunkservers must have valid IPs from all LAN classes
# MULTILAN_BITS = 24
# MULTILAN_CLASSES = 192.168.15.0, 10.10.10.0, 172.16.5.0

# optional custom IP mapping:
# MULTILAN_IPMAP_FILENAME = /etc/mfs/mfsipmap.cfg

# note: REMAP_* and MULTILAN_* options can be used together, but please consult 'man mfsmaster.cfg' for more detailed description before doing so

#######################################################################################
# CHUNKSERVER WORKING OPTIONS  - changes in this section require only process reload. #
#######################################################################################

# initial delay in seconds before starting replications (default is 60); the delay is counted from the moment the master has started accepting client connections
# REPLICATIONS_DELAY_INIT = 60

# whether to make undergoal replications respect topology (default is 0)
# 0 - do not respect topology
# 1 - pick destination server at random, but then choose best source server
# 2 - try to find destination server in the same rack as one of the existing copies and then replicate chunk locally (in the same rack)
# REPLICATIONS_RESPECT_TOPOLOGY = 0

# whether new chunks should be recorded with respect to topology (default is 0)
# 0 - do not respect topology
# N (N>0) - first try to create new chunks on servers with topological distance LOWER than N from the client; if not possible, for example because of storage class, chunk servers being busy or lacking space, then try servers with distance greater or equal to N
# CREATIONS_RESPECT_TOPOLOGY = 0

# avoid using same ip/rack for different chunk copies
# 0 - ignore ip and rackid (standard behaviour)
# 1 - avoid storing more than one copy on chunkservers using same IP number
# 2 - avoid storing more than one copy on chunkservers using IP number from the same rack id
# NOTICE! This parameter is available for backward compatibility purposes and should not be set to a value other than 0. Instead, distinguish feature from storage classes should be used. However, if it is set to a value other than 0, it will override any distinguish definintion in storage classes. For more informations about storage classes and distinguish feature refer to mfsscadmin manual.
# CHUNKS_UNIQUE_MODE = 0

# chunks loop shouldn't check more chunks per seconds than given number (default is 100000)
# CHUNKS_LOOP_MAX_CPS = 100000

# chunks loop shouldn't be done in less seconds than given number (default is 300)
# CHUNKS_LOOP_MIN_TIME = 300

# soft maximum number of chunks to delete on one chunkserver (default is 10)
# CHUNKS_SOFT_DEL_LIMIT = 10

# hard maximum number of chunks to delete on one chunkserver (default is 25)
# CHUNKS_HARD_DEL_LIMIT = 25

# maximum number of chunks to replicate to one chunkserver (default is 2,1,1,4,4)
# one number is equal to five same numbers separated by colons
#  first limit is for endangered chunks (chunks with only one copy)
#  second limit is for undergoal chunks (chunks with number of copies lower than specified goal)
#  third limit is for rebalance between servers with space usage around arithmetic mean
#  fourth limit is for rebalance between other servers (very low or very high space usage)
#  fifth limit is for recovery replications caused by I/O operations (read/write)
# usually first number should be greater than or equal to second, second greater than or equal to third, and fourth greater than or equal to third ( 1st >= 2nd >= 3rd <= 4th ); fifth limit should be equal or greater than any of the other limits
# CHUNKS_WRITE_REP_LIMIT = 2,1,1,4,4

# maximum number of chunks to replicate from one chunkserver (default is 10,5,2,5,10)
# one number is equal to five same numbers separated by colons
# limit groups are the same as in write limit, also relations between numbers should be the same as in write limits ( 1st >= 2nd >= 3rd <= 4th ); fifth limit should be equal or greater than any of the other limits
# CHUNKS_READ_REP_LIMIT = 10,5,2,5,10

# threshold for chunkserver load (default is 150)
# CS_HEAVY_LOAD_THRESHOLD = 150

# threshold ratio for chunkserver load (default is 3.0, whenever chunkserver load is higher than previously specified threshold and this ratio times higher than average load, then chunkserver is switched into 'grace' mode)
# CS_HEAVY_LOAD_RATIO_THRESHOLD = 3.0

# defines how long chunkservers will remain in 'grace' mode (in seconds)
# CS_HEAVY_LOAD_GRACE_PERIOD = 900

# maximum difference between space usage of chunkservers in percentage points (default is 1.0 ; valid values: 0.1 - 10.0)
# deprecates: ACCEPTABLE_DIFFERENCE (ACCEPTABLE_PERCENTAGE_DIFFERENCE = ACCEPTABLE_DIFFERENCE * 100.0)
# ACCEPTABLE_PERCENTAGE_DIFFERENCE = 1.0

# length of priority queues (for endangered, undergoal etc. chunks - chunks that should be processed first - default value is 1000000)
# PRIORITY_QUEUES_LENGTH = 1000000

# maximum number of seconds server can be in maintenance mode (default value is 0 - which means 'forever')
# CS_MAINTENANCE_MODE_TIMEOUT = 0

# maximum time server can be in "temporary" maintenance mode (server is switched to this mode whenever is stopped gracefully, after reconnection server is switched back to normal mode automatically ; default value: 30m); 
# time can be defined as a number of seconds (integer) or a time period in one of two possible formats: 
# first format: #.#T where T is one of: s-seconds, m-minutes, h-hours, d-days or w-weeks; fractions of seconds will be rounded to full seconds
# second format: #w#d#h#m#s, any number of definitions can be ommited, but the remaining definitions must be in order (so #d#m is still a valid definition, but #m#d is not); ranges: s,m: 0 to 59, h: 0 to 23, d: 0 to 6, w is unlimited and the first definition is also always unlimited (i.e. for #d#h#m d will be unlimited)
# CS_TEMP_MAINTENANCE_MODE_TIMEOUT = 30m

# how many days unused (disconnected) chunkserver should be kept in master data structures (valid values: 0 - 365 ; 0 means indefinitely ; default value is 7)
# CS_DAYS_TO_REMOVE_UNUSED = 7

#####################################################################################
# CLIENTS CONNECTION OPTIONS - changes in this section require only process reload. #
#####################################################################################

# IP address to listen on for client (mount) connections (* means any)
# MATOCL_LISTEN_HOST = *

# port to listen on for client (mount) connections (default is 9421)
# MATOCL_LISTEN_PORT = 9421

# default timeout in seconds for master-client connection (default is 10)
# MATOCL_TIMEOUT = 10

# forced timeout in seconds for master-client connection (default is 0 - do not force timeouts)
# MATOCL_FORCE_TIMEOUT = 0

# whether MooseFS should prevent connections from clients that are unable to read all data (especially erasure encoded data); default is 1 - prevent connections
# RESTRICT_INCOMPATIBLE_CLIENT_VERSIONS = 1

##################################################################################
# CLIENTS WORKING OPTIONS - changes in this section require only process reload. #
##################################################################################

# how long to sustain a disconnected client session (default is 1d)
# time can be defined as a number of seconds (integer) or a time period in one of two possible formats: 
# first format: #.#T where T is one of: s-seconds, m-minutes, h-hours, d-days or w-weeks; fractions of seconds will be rounded to full seconds
# second format: #w#d#h#m#s, any number of definitions can be ommited, but the remaining definitions must be in order (so #d#m is still a valid definition, but #m#d is not); ranges: s,m: 0 to 59, h: 0 to 23, d: 0 to 6, w is unlimited and the first definition is also always unlimited (i.e. for #d#h#m d will be unlimited)
# SESSION_SUSTAIN_TIME = 1d

###############################################################################
# FILE SYSTEM OPTIONS  - changes in this section require only process reload. #
###############################################################################

# default grace period for soft quota (default is 1 week)
# time can be defined as a number of seconds (integer) or a time period in one of two possible formats: 
# first format: #.#T where T is one of: s-seconds, m-minutes, h-hours, d-days or w-weeks; fractions of seconds will be rounded to full seconds
# second format: #w#d#h#m#s, any number of definitions can be ommited, but the remaining definitions must be in order (so #d#m is still a valid definition, but #m#d is not); ranges: s,m: 0 to 59, h: 0 to 23, d: 0 to 6, w is unlimited and the first definition is also always unlimited (i.e. for #d#h#m d will be unlimited)
# deprecates: QUOTA_TIME_LIMIT
# QUOTA_DEFAULT_GRACE_PERIOD = 1w

# mode of atime modification (default is 2)
# all modes:
#  0 - always modify atime for files, folders and symlinks
#  1 - always modify atime but only in case of files (do not modify atime in case of folders and symlinks)
#  2 - modify atime only when it is lower than ctime or mtime and when current time is higher than ctime or mtime respectively, also modify atime when current atime is older than 24h; do it for all objects during access (like "relatime" option in Linux)
#  3 - same as above but only in case of files; in case of folders and symlinks do not modify atime
#  4 - never modify atime during access (like "noatime" option)
# ATIME_MODE = 2

# move empty files to trash after unlink? (default is 0 - delete empty files immediately regardless of trash retention settings)
# KEEP_EMPTY_FILES_IN_TRASH = 0

# define amount of space reserved for superuser only (default is 0)
#  #B or #    - amount defined in bytes (you can use metric prefixes - SI and IEC binary prefixes)
#  #% or #.#% - amount defined as a percent of total space
#  #U or #.#U - amount in multiplies of 'max bytes currently used by one of chunkservers'
#  #C or #.#C - amount in multiplies of 'max total bytes of chunkserver - the highest capacity of one chunkserver'
# RESERVE_SPACE = 0

# define limit for number of hardlinks allowed for one object
# minimum value is 8 (required by POSIX) and maximum value is 65000 (same as in ext4 on Linux); default value is 32767
# MAX_ALLOWED_HARD_LINKS = 32767

# delay time after which inodes of deleted objects will be reused (default: 1d)
# time can be defined as a number of seconds (integer) or a time period in one of two possible formats: 
# first format: #.#T where T is one of: s-seconds, m-minutes, h-hours, d-days or w-weeks; fractions of seconds will be rounded to full seconds
# second format: #w#d#h#m#s, any number of definitions can be ommited, but the remaining definitions must be in order (so #d#m is still a valid definition, but #m#d is not); ranges: s,m: 0 to 59, h: 0 to 23, d: 0 to 6, w is unlimited and the first definition is also always unlimited (i.e. for #d#h#m d will be unlimited)
# BE AWARE if you change this value below 1 day you MUST ensure that this value is higher than any of the following timeouts in all clients:
# mfsattrcacheto,mfsxattrcacheto,mfsentrycacheto,mfsdirentrycacheto,mfsnegentrycacheto,mfssymlinkcacheto
# INODE_REUSE_DELAY = 1d

# how many data parts should system use when old style EC definition is in use (@n instead of @8+n or @4+n; default is 8)
# DEFAULT_EC_DATA_PARTS = 8
